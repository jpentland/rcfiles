#!/bin/bash
fifo=/tmp/$USER-statusbar
font=$(sed -n 's/st.font: \(.*\)/\1/p' ~/.Xresources)
self=$0
mods="$HOME/.local/dzen2"
left_bar_ratio=0.45
restart_file=/tmp/$USER-statusbar-restart

# Unicode Chars
right_triangle="\ue0b0"
left_triangle="\ue0b2"
monocle="\ufbce"
tiled="\ue75a"

# Colors
cbg1="#444455"

# Create fifo
if ! [ -p $fifo ]; then
	rm -f $fifo
	mkfifo $fifo
fi

# -k option to kill statusbar
if [ "$1" == "-k" ]; then
	echo "kill 0" >> $fifo
	exit 0
fi

# -r option to restart statusbar
if [ "$1" == "-r" ]; then
	echo "restart 0" >> $fifo
	exit 0
fi

# Formatting functions
function cbg {
	color=$1; shift
	echo -n "^bg($color)$@^bg()"
}

function cfg {
	color=$1; shift
	echo -n "^fg($color)$@^fg()"
}

function shorten {
	len=$1; shift
	var="$@"
	if [ "${#var}" -gt "$len" ]; then
		echo -n "${var:0:$len}\u2026"
	else
		echo -n "$var"
	fi
}

# Add a space to non-empty strings
function pad {
	if grep -q "[^ ]" <<< "$@"; then
		echo "$@ "
	else
		echo
	fi
}

# Get Screen Width
screen_width=$(xrandr --listactivemonitors | sed -n '2s/.* \([0-9]\+\)\/.*/\1/p')
left_bar_width=$(bc <<< "( $screen_width * $left_bar_ratio )" | sed 's/\..*//')
echo "screen width = $screen_width"
echo "left bar = $left_bar_width"

# dzen commands
function dzen_left {
	sleep 0.2s
	LC_ALL=c stdbuf -oL -eL uniq \
		| dzen2 -xs 1 -ta l -dock -fn "$font" -tw $left_bar_width -bg "#000000"
}

function dzen_right {
	LC_ALL=c stdbuf -oL -eL uniq \
		| dzen2 -xs 1 -ta r -dock -fn "$font" -bg "#000000"
}

# Cleanup on exit
function cleanup {
	trap - INT TERM
	killjobs
	exit 0
}

function killjobs {
	kill $(jobs -p)
}

trap cleanup INT TERM

# Periodically run a command and pipe to statusbar
# Usage: period <name> <period> <command>
function period {
	name=$1; shift
	slp=$1; shift
	cmd=$@
	while true; do
		$cmd 2> /dev/null | sed -u "s/^.*$/$name &/"
		sleep $slp
	done
}

function check_tabs {
	if [ "$(bsptab check-add-new)" == "true" ]; then
		echo "(tabs)"
	else
		echo ""
	fi
}

period battery		1m 	"$mods/battery.sh" >> $fifo &
period bitcoin		1m 	"$mods/bitcoin.sh" >> $fifo &
period bluetooth	10s "$mods/bluetooth.sh" >> $fifo &
period kbmap		10s "$mods/kbmap.sh" >> $fifo &
period mail			1m	"$mods/mail.sh" >> $fifo &
period mem			5s	"$mods/mem.sh" >> $fifo &
period network		5s	"$mods/network.sh" >> $fifo &
period song			5s	"$mods/song.sh" >> $fifo &
period volume		5s	"$mods/volume.sh" >> $fifo &
period weather		1m	"$mods/weather.sh" >> $fifo &
period tabs			5s  "check_tabs" >> $fifo &
xtitle -sf 'title %s\n' >> $fifo &
clock -sf "date %a %b %_d" >> $fifo &
clock -sf "time %k:%M" >> $fifo &
bspc subscribe report | $mods/process_report.py | while read line; do
	echo $line
	echo "tabs $(check_tabs)"
done >> $fifo &

# Set padding
bspc config top_padding 0
bspc config -m primary top_padding 20

# Working Varaibles
ws=""
layout=""
title=""
datev=""
battery=""
bitcoin=""
bluetooth=""
kbmap=""
mail=""
mem=""
network=""
song=""
volume=""
weather=""
tabs=""
dorestart=false

# Parse information from fifo and pass to dzen2
cat $fifo | while read cmd line; do
	case $cmd in
		ws) ws="$(cbg $cbg1 " $line ")$(cfg $cbg1 "$right_triangle")"
			;;
		layout) layout="$(cfg "#22ff22" "$line")"
			;;
		tabs) tabs="$(cfg "#ffff00" "$line")"
			;;
		title) title="$(shorten 50 $line)"
			;;
		date) datev="$(cfg "#88ff88" $line)"
			;;
		time)
			  timev="$line"
			;;
		battery) battery="$line"
			;;
		bitcoin) bitcoin="$line"
			;;
		bluetooth) bluetooth="$line"
			;;
		kbmap) kbmap="$line"
			;;
		mail) mail="$(pad $line)"
			;;
		mem) mem="$line"
			;;
		network) network="$line"
			;;
		song) song=$(pad $(shorten 30 $line))
			;;
		volume) volume="$line"
			;;
		weather) weather="$line"
			;;
		kill) echo "Got kill command, exiting..." 1>&2
			break
			;;
		restart) echo "Got restart command, exiting..." 1>&2
			touch $restart_file
			break
			;;
	esac

	# Date
	datetime="$datev $(cfg "#000000" $(cbg $cbg1 $right_triangle))$(cbg $cbg1 $timev)"

	# Left Bar
	echo -e "$ws $layout $tabs $(cfg "#000000" $(cbg $cbg1 $right_triangle))$(cbg $cbg1 ' '$title' ')$(cfg $cbg1 $right_triangle)" 1>&5

	# Right Bar
	echo -e "$bitcoin $mail$song$bluetooth$network $kbmap $volume $mem $battery $weather $datetime" 1>&6
done 6> >(dzen_right) 5> >(dzen_left)

killjobs
if [ -f $restart_file ]; then
	echo "restarting $0..."
	rm $restart_file
	($0 &)
fi
