#!/bin/sh
ICON="audio-headset"
FIFO="/tmp/$(basename $0)-fifo"
TMP_FILE="/tmp/$(basename $0)-running"
SLEEP_TIME="10s"
alias bt=bluetoothctl

function btcmd {
	echo "$@" > $FIFO-bt
}

function build_device {
	code=$1; shift
	device=$1; shift
	connected=$(bt info $code | grep 'Connected:' | awk '{print $2}')
	paired=$(bt info $code | grep 'Paired:' | awk '{print $2}')
	scanning="$(bt show | grep "Discovering:" | awk '{print $2}')"
	icon=$(bt info $code | grep 'Icon:' | awk '{print $2}')
	if [ "$connected" == "yes" ]; then
		echo -n "|$device!$0 disconnect $code!gtk-apply"
	elif [ "$paired" == "yes" ]; then
		echo -n "|$device!$0 connect $code!$icon"
	elif [ "$scanning" == "yes" ]; then
		echo -n "|$device!$0 pair $code!gtk-connect"
	fi
}

function sep {
	echo -n "|"
}

function build_devices {
	bt devices | awk '{print $3 " " "("$2")"}' | \
	while read device; do
		code=$(echo $device | sed 's/.*(\(.*\))/\1/')
		build_device $code "$device"
	done
}

function clear_unpaired_devices {
	bt devices | awk '{print $3 " " "("$2")"}' | \
	while read device; do
		code=$(echo $device | sed 's/.*(\(.*\))/\1/')
		paired=$(bt info $code | grep 'Paired:' | awk '{print $2}')
		if [ "$paired" == "no" ]; then
			btcmd remove $code
		fi
	done
}

function build_discoverable {
	discoverable="$(bt show | grep 'Discoverable:' | awk '{print $2}')"
	if [ "$discoverable" == "no" ]; then
		echo -n "|Set Discoverable!$0 discoverable!starred"
	else
		echo -n "|Disable Discoverable!$0 discoverable_off!process-stop"
	fi
}

function build_scan {
	scanning="$(bt show | grep "Discovering:" | awk '{print $2}')"
	if [ "$scanning" == "no" ]; then
		echo -n "|Scan!$0 scan!edit-find"
	else
		echo -n "|Scan Off!$0 scan_off!process-stop"
	fi
}

function build_exit {
	echo -n "|Exit!$0 cleanup!system-shutdown"
}

function build_menu {
	powered="$(bt show | grep 'Powered' | awk '{print $2}')"

	if [ "$powered" == "no" ]; then
		echo -n "Power on!$0 power_on!gtk-apply"
	else
		echo -n "Power off!$0 power_off!gtk-cancel"
		sep
		build_devices
		sep
		build_scan
		sep
		build_discoverable
		sep
		build_exit
	fi
}

function scan {
	btcmd scan on
}

function scan_off {
	btcmd scan off
	clear_unpaired_devices
}

function pair {
	btcmd pair $1
	btcmd trust $1
}

function power_on {
	btcmd power on
}

function power_off {
	btcmd power off
}

function discoverable {
	btcmd discoverable on
}

function discoverable_off {
	btcmd discoverable off
}

function connect {
	btcmd connect $1
}

function disconnect {
	btcmd disconnect $1
}

function refresh {
	echo "menu:$(build_menu)" > $FIFO
}

function working {
	echo "icon:nm-stage01-connecting01" > $FIFO
}

function doneworking {
	echo "icon:$ICON" > $FIFO
}

function cleanup {
	kill $(cat $TMP_FILE)
	rm $FIFO $TMP_FILE
	rm $FIFO-bt
	killall bluetoothctl
	exit 0
}

if ! [ -p "$FIFO" ]; then
	mkfifo $FIFO
	mkfifo $FIFO-bt
	echo "$(build_menu)"
	tail -n1 -f $FIFO | yad --notification --menu="$(build_menu)" --image="$ICON" --command= --listen &
	echo $! > $TMP_FILE
	trap "$0 cleanup" SIGINT
	tail -n1 -f $FIFO-bt | bt | \
	while read line; do
		if ps -o pid= -p $(cat $TMP_FILE); then
			refresh
			doneworking
		else
			cleanup
		fi
	done
fi

if ! [ -z "$1" ]; then
	command=$1; shift
	if [ "$command" == "refresh" ]; then
		refresh
		exit 0
	fi
	working
	$command $@
fi
