" Leader
:let mapleader = ","

" Vundle config
set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'neovimhaskell/haskell-vim'
Plugin 'wagnerf42/vim-clippy'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-sleuth'
Plugin 'cespare/vim-toml'
Plugin 'tpope/vim-surround'
Plugin 'dense-analysis/ale'
Plugin 'hsanson/vim-android'
Plugin 'craigemery/vim-autotag'
Plugin 'sirtaj/vim-openscad'
set rtp+=~/.fzf
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
call vundle#end()            " required
filetype plugin indent on    " required

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

match ErrorMsg '\s\+$'

"Gui options
:set guioptions-=T
:set guioptions-=r  "remove right-hand scroll bar
:set guioptions-=L  "remove left-hand scroll bar
:set guifont=Inconsolata\ 12

" Editor options
:set expandtab
:set tabstop=4
filetype plugin indent on
syntax on
highlight Normal ctermfg=white ctermbg=NONE
:set so=5
set omnifunc=syntaxcomplete#Complete
set tags=./tags,tags;$HOME

" Nice keyboard shortcuts
nnoremap Y y$
nnoremap n nzzzv
nnoremap U Uzzzv
nnoremap <C-p> :GFiles<Cr>

" undo breakpoints
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u
inoremap , ,<c-g>u
inoremap [ [<c-g>u
inoremap ] ]<c-g>u
inoremap ( (<c-g>u
inoremap ) )<c-g>u
inoremap { {<c-g>u
inoremap } }<c-g>u
inoremap = =<c-g>u
inoremap <space> <space><c-g>u

" Moving text
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
inoremap <C-j> <esc>:m .+1<CR>==i
inoremap <C-k> <esc>:m .-2<CR>==i
inoremap <leader>j :m .+1<CR>==
inoremap <leader>k :m .-2<CR>==

" Buffer Navication
map <tab> :bNext<CR>
map <C-b> :Buffers<CR>
map <C-k> :bd<CR>

" Relative number
:set number relativenumber
:set nu rnu
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

" Color options
:hi SpellBad ctermbg='Magenta'

" Use bar on insert mode
autocmd VimEnter,InsertLeave * silent exec "! echo -ne '\e[1 q'"
autocmd VimLeave,InsertEnter * silent exec "! echo -ne '\e[5 q'"

"File types
autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd Filetype markdown setlocal spell textwidth=72
au BufReadPost,BufNewFile .xmobarrc setlocal ft=haskell

" Email
au BufRead /tmp/mutt-* set tw=72
augroup filetypedetect
  autocmd BufRead,BufNewFile *mutt-*              setfiletype mail
augroup END
autocmd Filetype mail setlocal spell

"Android
let g:andoid_sdk_path="~/Android/Sdk/"

" Linters
" let g:ale_linters = {'haskell': ['ghc'],'java': ['javac']}
let g:ale_linters = {'haskell': ['ghc']}
let g:ale_haskell_ghc_options = '-fno-code -v0 -dynamic'
let g:ale_java_javac_classpath = expand('~/Android/Sdk/platforms/android-25/android.jar')

" Ale colors
highlight clear ALEWarning

" modify selected text using combining diacritics
command! -range -nargs=0 Overline        call s:CombineSelection(<line1>, <line2>, '0305')
command! -range -nargs=0 Underline       call s:CombineSelection(<line1>, <line2>, '0332')
command! -range -nargs=0 DoubleUnderline call s:CombineSelection(<line1>, <line2>, '0333')
command! -range -nargs=0 Strikethrough   call s:CombineSelection(<line1>, <line2>, '0336')

function! s:CombineSelection(line1, line2, cp)
  execute 'let char = "\u'.a:cp.'"'
  execute a:line1.','.a:line2.'s/\%V[^[:cntrl:]]/&'.char.'/ge'
endfunction

" Highlight lines longer than 80 characters
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)
